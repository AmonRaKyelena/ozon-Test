// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/AmonRaKyelena/ozon-Test/internal/service/comment.CommentService -o comment_service_mock.go -n CommentServiceMock -p mocks

import (
	"context"
	"github.com/AmonRaKyelena/ozon-Test/internal/handlers/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CommentServiceMock implements mm_comment.CommentService
type CommentServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateComment          func(ctx context.Context, postID int64, text string, parentID *int64) (i1 int64, err error)
	funcCreateCommentOrigin    string
	inspectFuncCreateComment   func(ctx context.Context, postID int64, text string, parentID *int64)
	afterCreateCommentCounter  uint64
	beforeCreateCommentCounter uint64
	CreateCommentMock          mCommentServiceMockCreateComment

	funcGetComments          func(ctx context.Context, postID int64, parentID *int64, limit int32, offset int32) (cpa1 []*model.CommentForPagination, err error)
	funcGetCommentsOrigin    string
	inspectFuncGetComments   func(ctx context.Context, postID int64, parentID *int64, limit int32, offset int32)
	afterGetCommentsCounter  uint64
	beforeGetCommentsCounter uint64
	GetCommentsMock          mCommentServiceMockGetComments

	funcGetCommentsByParentID          func(ctx context.Context, parentID int64, limit int32, offset int32) (cpa1 []*model.CommentForPagination, err error)
	funcGetCommentsByParentIDOrigin    string
	inspectFuncGetCommentsByParentID   func(ctx context.Context, parentID int64, limit int32, offset int32)
	afterGetCommentsByParentIDCounter  uint64
	beforeGetCommentsByParentIDCounter uint64
	GetCommentsByParentIDMock          mCommentServiceMockGetCommentsByParentID

	funcGetCommentsByPostIDs          func(ctx context.Context, postIDs []int64, limit int32, offset int32) (m1 map[int64][]*model.CommentForPagination, err error)
	funcGetCommentsByPostIDsOrigin    string
	inspectFuncGetCommentsByPostIDs   func(ctx context.Context, postIDs []int64, limit int32, offset int32)
	afterGetCommentsByPostIDsCounter  uint64
	beforeGetCommentsByPostIDsCounter uint64
	GetCommentsByPostIDsMock          mCommentServiceMockGetCommentsByPostIDs
}

// NewCommentServiceMock returns a mock for mm_comment.CommentService
func NewCommentServiceMock(t minimock.Tester) *CommentServiceMock {
	m := &CommentServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateCommentMock = mCommentServiceMockCreateComment{mock: m}
	m.CreateCommentMock.callArgs = []*CommentServiceMockCreateCommentParams{}

	m.GetCommentsMock = mCommentServiceMockGetComments{mock: m}
	m.GetCommentsMock.callArgs = []*CommentServiceMockGetCommentsParams{}

	m.GetCommentsByParentIDMock = mCommentServiceMockGetCommentsByParentID{mock: m}
	m.GetCommentsByParentIDMock.callArgs = []*CommentServiceMockGetCommentsByParentIDParams{}

	m.GetCommentsByPostIDsMock = mCommentServiceMockGetCommentsByPostIDs{mock: m}
	m.GetCommentsByPostIDsMock.callArgs = []*CommentServiceMockGetCommentsByPostIDsParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCommentServiceMockCreateComment struct {
	optional           bool
	mock               *CommentServiceMock
	defaultExpectation *CommentServiceMockCreateCommentExpectation
	expectations       []*CommentServiceMockCreateCommentExpectation

	callArgs []*CommentServiceMockCreateCommentParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CommentServiceMockCreateCommentExpectation specifies expectation struct of the CommentService.CreateComment
type CommentServiceMockCreateCommentExpectation struct {
	mock               *CommentServiceMock
	params             *CommentServiceMockCreateCommentParams
	paramPtrs          *CommentServiceMockCreateCommentParamPtrs
	expectationOrigins CommentServiceMockCreateCommentExpectationOrigins
	results            *CommentServiceMockCreateCommentResults
	returnOrigin       string
	Counter            uint64
}

// CommentServiceMockCreateCommentParams contains parameters of the CommentService.CreateComment
type CommentServiceMockCreateCommentParams struct {
	ctx      context.Context
	postID   int64
	text     string
	parentID *int64
}

// CommentServiceMockCreateCommentParamPtrs contains pointers to parameters of the CommentService.CreateComment
type CommentServiceMockCreateCommentParamPtrs struct {
	ctx      *context.Context
	postID   *int64
	text     *string
	parentID **int64
}

// CommentServiceMockCreateCommentResults contains results of the CommentService.CreateComment
type CommentServiceMockCreateCommentResults struct {
	i1  int64
	err error
}

// CommentServiceMockCreateCommentOrigins contains origins of expectations of the CommentService.CreateComment
type CommentServiceMockCreateCommentExpectationOrigins struct {
	origin         string
	originCtx      string
	originPostID   string
	originText     string
	originParentID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateComment *mCommentServiceMockCreateComment) Optional() *mCommentServiceMockCreateComment {
	mmCreateComment.optional = true
	return mmCreateComment
}

// Expect sets up expected params for CommentService.CreateComment
func (mmCreateComment *mCommentServiceMockCreateComment) Expect(ctx context.Context, postID int64, text string, parentID *int64) *mCommentServiceMockCreateComment {
	if mmCreateComment.mock.funcCreateComment != nil {
		mmCreateComment.mock.t.Fatalf("CommentServiceMock.CreateComment mock is already set by Set")
	}

	if mmCreateComment.defaultExpectation == nil {
		mmCreateComment.defaultExpectation = &CommentServiceMockCreateCommentExpectation{}
	}

	if mmCreateComment.defaultExpectation.paramPtrs != nil {
		mmCreateComment.mock.t.Fatalf("CommentServiceMock.CreateComment mock is already set by ExpectParams functions")
	}

	mmCreateComment.defaultExpectation.params = &CommentServiceMockCreateCommentParams{ctx, postID, text, parentID}
	mmCreateComment.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateComment.expectations {
		if minimock.Equal(e.params, mmCreateComment.defaultExpectation.params) {
			mmCreateComment.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateComment.defaultExpectation.params)
		}
	}

	return mmCreateComment
}

// ExpectCtxParam1 sets up expected param ctx for CommentService.CreateComment
func (mmCreateComment *mCommentServiceMockCreateComment) ExpectCtxParam1(ctx context.Context) *mCommentServiceMockCreateComment {
	if mmCreateComment.mock.funcCreateComment != nil {
		mmCreateComment.mock.t.Fatalf("CommentServiceMock.CreateComment mock is already set by Set")
	}

	if mmCreateComment.defaultExpectation == nil {
		mmCreateComment.defaultExpectation = &CommentServiceMockCreateCommentExpectation{}
	}

	if mmCreateComment.defaultExpectation.params != nil {
		mmCreateComment.mock.t.Fatalf("CommentServiceMock.CreateComment mock is already set by Expect")
	}

	if mmCreateComment.defaultExpectation.paramPtrs == nil {
		mmCreateComment.defaultExpectation.paramPtrs = &CommentServiceMockCreateCommentParamPtrs{}
	}
	mmCreateComment.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateComment.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateComment
}

// ExpectPostIDParam2 sets up expected param postID for CommentService.CreateComment
func (mmCreateComment *mCommentServiceMockCreateComment) ExpectPostIDParam2(postID int64) *mCommentServiceMockCreateComment {
	if mmCreateComment.mock.funcCreateComment != nil {
		mmCreateComment.mock.t.Fatalf("CommentServiceMock.CreateComment mock is already set by Set")
	}

	if mmCreateComment.defaultExpectation == nil {
		mmCreateComment.defaultExpectation = &CommentServiceMockCreateCommentExpectation{}
	}

	if mmCreateComment.defaultExpectation.params != nil {
		mmCreateComment.mock.t.Fatalf("CommentServiceMock.CreateComment mock is already set by Expect")
	}

	if mmCreateComment.defaultExpectation.paramPtrs == nil {
		mmCreateComment.defaultExpectation.paramPtrs = &CommentServiceMockCreateCommentParamPtrs{}
	}
	mmCreateComment.defaultExpectation.paramPtrs.postID = &postID
	mmCreateComment.defaultExpectation.expectationOrigins.originPostID = minimock.CallerInfo(1)

	return mmCreateComment
}

// ExpectTextParam3 sets up expected param text for CommentService.CreateComment
func (mmCreateComment *mCommentServiceMockCreateComment) ExpectTextParam3(text string) *mCommentServiceMockCreateComment {
	if mmCreateComment.mock.funcCreateComment != nil {
		mmCreateComment.mock.t.Fatalf("CommentServiceMock.CreateComment mock is already set by Set")
	}

	if mmCreateComment.defaultExpectation == nil {
		mmCreateComment.defaultExpectation = &CommentServiceMockCreateCommentExpectation{}
	}

	if mmCreateComment.defaultExpectation.params != nil {
		mmCreateComment.mock.t.Fatalf("CommentServiceMock.CreateComment mock is already set by Expect")
	}

	if mmCreateComment.defaultExpectation.paramPtrs == nil {
		mmCreateComment.defaultExpectation.paramPtrs = &CommentServiceMockCreateCommentParamPtrs{}
	}
	mmCreateComment.defaultExpectation.paramPtrs.text = &text
	mmCreateComment.defaultExpectation.expectationOrigins.originText = minimock.CallerInfo(1)

	return mmCreateComment
}

// ExpectParentIDParam4 sets up expected param parentID for CommentService.CreateComment
func (mmCreateComment *mCommentServiceMockCreateComment) ExpectParentIDParam4(parentID *int64) *mCommentServiceMockCreateComment {
	if mmCreateComment.mock.funcCreateComment != nil {
		mmCreateComment.mock.t.Fatalf("CommentServiceMock.CreateComment mock is already set by Set")
	}

	if mmCreateComment.defaultExpectation == nil {
		mmCreateComment.defaultExpectation = &CommentServiceMockCreateCommentExpectation{}
	}

	if mmCreateComment.defaultExpectation.params != nil {
		mmCreateComment.mock.t.Fatalf("CommentServiceMock.CreateComment mock is already set by Expect")
	}

	if mmCreateComment.defaultExpectation.paramPtrs == nil {
		mmCreateComment.defaultExpectation.paramPtrs = &CommentServiceMockCreateCommentParamPtrs{}
	}
	mmCreateComment.defaultExpectation.paramPtrs.parentID = &parentID
	mmCreateComment.defaultExpectation.expectationOrigins.originParentID = minimock.CallerInfo(1)

	return mmCreateComment
}

// Inspect accepts an inspector function that has same arguments as the CommentService.CreateComment
func (mmCreateComment *mCommentServiceMockCreateComment) Inspect(f func(ctx context.Context, postID int64, text string, parentID *int64)) *mCommentServiceMockCreateComment {
	if mmCreateComment.mock.inspectFuncCreateComment != nil {
		mmCreateComment.mock.t.Fatalf("Inspect function is already set for CommentServiceMock.CreateComment")
	}

	mmCreateComment.mock.inspectFuncCreateComment = f

	return mmCreateComment
}

// Return sets up results that will be returned by CommentService.CreateComment
func (mmCreateComment *mCommentServiceMockCreateComment) Return(i1 int64, err error) *CommentServiceMock {
	if mmCreateComment.mock.funcCreateComment != nil {
		mmCreateComment.mock.t.Fatalf("CommentServiceMock.CreateComment mock is already set by Set")
	}

	if mmCreateComment.defaultExpectation == nil {
		mmCreateComment.defaultExpectation = &CommentServiceMockCreateCommentExpectation{mock: mmCreateComment.mock}
	}
	mmCreateComment.defaultExpectation.results = &CommentServiceMockCreateCommentResults{i1, err}
	mmCreateComment.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateComment.mock
}

// Set uses given function f to mock the CommentService.CreateComment method
func (mmCreateComment *mCommentServiceMockCreateComment) Set(f func(ctx context.Context, postID int64, text string, parentID *int64) (i1 int64, err error)) *CommentServiceMock {
	if mmCreateComment.defaultExpectation != nil {
		mmCreateComment.mock.t.Fatalf("Default expectation is already set for the CommentService.CreateComment method")
	}

	if len(mmCreateComment.expectations) > 0 {
		mmCreateComment.mock.t.Fatalf("Some expectations are already set for the CommentService.CreateComment method")
	}

	mmCreateComment.mock.funcCreateComment = f
	mmCreateComment.mock.funcCreateCommentOrigin = minimock.CallerInfo(1)
	return mmCreateComment.mock
}

// When sets expectation for the CommentService.CreateComment which will trigger the result defined by the following
// Then helper
func (mmCreateComment *mCommentServiceMockCreateComment) When(ctx context.Context, postID int64, text string, parentID *int64) *CommentServiceMockCreateCommentExpectation {
	if mmCreateComment.mock.funcCreateComment != nil {
		mmCreateComment.mock.t.Fatalf("CommentServiceMock.CreateComment mock is already set by Set")
	}

	expectation := &CommentServiceMockCreateCommentExpectation{
		mock:               mmCreateComment.mock,
		params:             &CommentServiceMockCreateCommentParams{ctx, postID, text, parentID},
		expectationOrigins: CommentServiceMockCreateCommentExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateComment.expectations = append(mmCreateComment.expectations, expectation)
	return expectation
}

// Then sets up CommentService.CreateComment return parameters for the expectation previously defined by the When method
func (e *CommentServiceMockCreateCommentExpectation) Then(i1 int64, err error) *CommentServiceMock {
	e.results = &CommentServiceMockCreateCommentResults{i1, err}
	return e.mock
}

// Times sets number of times CommentService.CreateComment should be invoked
func (mmCreateComment *mCommentServiceMockCreateComment) Times(n uint64) *mCommentServiceMockCreateComment {
	if n == 0 {
		mmCreateComment.mock.t.Fatalf("Times of CommentServiceMock.CreateComment mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateComment.expectedInvocations, n)
	mmCreateComment.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateComment
}

func (mmCreateComment *mCommentServiceMockCreateComment) invocationsDone() bool {
	if len(mmCreateComment.expectations) == 0 && mmCreateComment.defaultExpectation == nil && mmCreateComment.mock.funcCreateComment == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateComment.mock.afterCreateCommentCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateComment.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateComment implements mm_comment.CommentService
func (mmCreateComment *CommentServiceMock) CreateComment(ctx context.Context, postID int64, text string, parentID *int64) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateComment.beforeCreateCommentCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateComment.afterCreateCommentCounter, 1)

	mmCreateComment.t.Helper()

	if mmCreateComment.inspectFuncCreateComment != nil {
		mmCreateComment.inspectFuncCreateComment(ctx, postID, text, parentID)
	}

	mm_params := CommentServiceMockCreateCommentParams{ctx, postID, text, parentID}

	// Record call args
	mmCreateComment.CreateCommentMock.mutex.Lock()
	mmCreateComment.CreateCommentMock.callArgs = append(mmCreateComment.CreateCommentMock.callArgs, &mm_params)
	mmCreateComment.CreateCommentMock.mutex.Unlock()

	for _, e := range mmCreateComment.CreateCommentMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateComment.CreateCommentMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateComment.CreateCommentMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateComment.CreateCommentMock.defaultExpectation.params
		mm_want_ptrs := mmCreateComment.CreateCommentMock.defaultExpectation.paramPtrs

		mm_got := CommentServiceMockCreateCommentParams{ctx, postID, text, parentID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateComment.t.Errorf("CommentServiceMock.CreateComment got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateComment.CreateCommentMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.postID != nil && !minimock.Equal(*mm_want_ptrs.postID, mm_got.postID) {
				mmCreateComment.t.Errorf("CommentServiceMock.CreateComment got unexpected parameter postID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateComment.CreateCommentMock.defaultExpectation.expectationOrigins.originPostID, *mm_want_ptrs.postID, mm_got.postID, minimock.Diff(*mm_want_ptrs.postID, mm_got.postID))
			}

			if mm_want_ptrs.text != nil && !minimock.Equal(*mm_want_ptrs.text, mm_got.text) {
				mmCreateComment.t.Errorf("CommentServiceMock.CreateComment got unexpected parameter text, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateComment.CreateCommentMock.defaultExpectation.expectationOrigins.originText, *mm_want_ptrs.text, mm_got.text, minimock.Diff(*mm_want_ptrs.text, mm_got.text))
			}

			if mm_want_ptrs.parentID != nil && !minimock.Equal(*mm_want_ptrs.parentID, mm_got.parentID) {
				mmCreateComment.t.Errorf("CommentServiceMock.CreateComment got unexpected parameter parentID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateComment.CreateCommentMock.defaultExpectation.expectationOrigins.originParentID, *mm_want_ptrs.parentID, mm_got.parentID, minimock.Diff(*mm_want_ptrs.parentID, mm_got.parentID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateComment.t.Errorf("CommentServiceMock.CreateComment got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateComment.CreateCommentMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateComment.CreateCommentMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateComment.t.Fatal("No results are set for the CommentServiceMock.CreateComment")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateComment.funcCreateComment != nil {
		return mmCreateComment.funcCreateComment(ctx, postID, text, parentID)
	}
	mmCreateComment.t.Fatalf("Unexpected call to CommentServiceMock.CreateComment. %v %v %v %v", ctx, postID, text, parentID)
	return
}

// CreateCommentAfterCounter returns a count of finished CommentServiceMock.CreateComment invocations
func (mmCreateComment *CommentServiceMock) CreateCommentAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateComment.afterCreateCommentCounter)
}

// CreateCommentBeforeCounter returns a count of CommentServiceMock.CreateComment invocations
func (mmCreateComment *CommentServiceMock) CreateCommentBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateComment.beforeCreateCommentCounter)
}

// Calls returns a list of arguments used in each call to CommentServiceMock.CreateComment.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateComment *mCommentServiceMockCreateComment) Calls() []*CommentServiceMockCreateCommentParams {
	mmCreateComment.mutex.RLock()

	argCopy := make([]*CommentServiceMockCreateCommentParams, len(mmCreateComment.callArgs))
	copy(argCopy, mmCreateComment.callArgs)

	mmCreateComment.mutex.RUnlock()

	return argCopy
}

// MinimockCreateCommentDone returns true if the count of the CreateComment invocations corresponds
// the number of defined expectations
func (m *CommentServiceMock) MinimockCreateCommentDone() bool {
	if m.CreateCommentMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateCommentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateCommentMock.invocationsDone()
}

// MinimockCreateCommentInspect logs each unmet expectation
func (m *CommentServiceMock) MinimockCreateCommentInspect() {
	for _, e := range m.CreateCommentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommentServiceMock.CreateComment at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateCommentCounter := mm_atomic.LoadUint64(&m.afterCreateCommentCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateCommentMock.defaultExpectation != nil && afterCreateCommentCounter < 1 {
		if m.CreateCommentMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CommentServiceMock.CreateComment at\n%s", m.CreateCommentMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CommentServiceMock.CreateComment at\n%s with params: %#v", m.CreateCommentMock.defaultExpectation.expectationOrigins.origin, *m.CreateCommentMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateComment != nil && afterCreateCommentCounter < 1 {
		m.t.Errorf("Expected call to CommentServiceMock.CreateComment at\n%s", m.funcCreateCommentOrigin)
	}

	if !m.CreateCommentMock.invocationsDone() && afterCreateCommentCounter > 0 {
		m.t.Errorf("Expected %d calls to CommentServiceMock.CreateComment at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateCommentMock.expectedInvocations), m.CreateCommentMock.expectedInvocationsOrigin, afterCreateCommentCounter)
	}
}

type mCommentServiceMockGetComments struct {
	optional           bool
	mock               *CommentServiceMock
	defaultExpectation *CommentServiceMockGetCommentsExpectation
	expectations       []*CommentServiceMockGetCommentsExpectation

	callArgs []*CommentServiceMockGetCommentsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CommentServiceMockGetCommentsExpectation specifies expectation struct of the CommentService.GetComments
type CommentServiceMockGetCommentsExpectation struct {
	mock               *CommentServiceMock
	params             *CommentServiceMockGetCommentsParams
	paramPtrs          *CommentServiceMockGetCommentsParamPtrs
	expectationOrigins CommentServiceMockGetCommentsExpectationOrigins
	results            *CommentServiceMockGetCommentsResults
	returnOrigin       string
	Counter            uint64
}

// CommentServiceMockGetCommentsParams contains parameters of the CommentService.GetComments
type CommentServiceMockGetCommentsParams struct {
	ctx      context.Context
	postID   int64
	parentID *int64
	limit    int32
	offset   int32
}

// CommentServiceMockGetCommentsParamPtrs contains pointers to parameters of the CommentService.GetComments
type CommentServiceMockGetCommentsParamPtrs struct {
	ctx      *context.Context
	postID   *int64
	parentID **int64
	limit    *int32
	offset   *int32
}

// CommentServiceMockGetCommentsResults contains results of the CommentService.GetComments
type CommentServiceMockGetCommentsResults struct {
	cpa1 []*model.CommentForPagination
	err  error
}

// CommentServiceMockGetCommentsOrigins contains origins of expectations of the CommentService.GetComments
type CommentServiceMockGetCommentsExpectationOrigins struct {
	origin         string
	originCtx      string
	originPostID   string
	originParentID string
	originLimit    string
	originOffset   string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetComments *mCommentServiceMockGetComments) Optional() *mCommentServiceMockGetComments {
	mmGetComments.optional = true
	return mmGetComments
}

// Expect sets up expected params for CommentService.GetComments
func (mmGetComments *mCommentServiceMockGetComments) Expect(ctx context.Context, postID int64, parentID *int64, limit int32, offset int32) *mCommentServiceMockGetComments {
	if mmGetComments.mock.funcGetComments != nil {
		mmGetComments.mock.t.Fatalf("CommentServiceMock.GetComments mock is already set by Set")
	}

	if mmGetComments.defaultExpectation == nil {
		mmGetComments.defaultExpectation = &CommentServiceMockGetCommentsExpectation{}
	}

	if mmGetComments.defaultExpectation.paramPtrs != nil {
		mmGetComments.mock.t.Fatalf("CommentServiceMock.GetComments mock is already set by ExpectParams functions")
	}

	mmGetComments.defaultExpectation.params = &CommentServiceMockGetCommentsParams{ctx, postID, parentID, limit, offset}
	mmGetComments.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetComments.expectations {
		if minimock.Equal(e.params, mmGetComments.defaultExpectation.params) {
			mmGetComments.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetComments.defaultExpectation.params)
		}
	}

	return mmGetComments
}

// ExpectCtxParam1 sets up expected param ctx for CommentService.GetComments
func (mmGetComments *mCommentServiceMockGetComments) ExpectCtxParam1(ctx context.Context) *mCommentServiceMockGetComments {
	if mmGetComments.mock.funcGetComments != nil {
		mmGetComments.mock.t.Fatalf("CommentServiceMock.GetComments mock is already set by Set")
	}

	if mmGetComments.defaultExpectation == nil {
		mmGetComments.defaultExpectation = &CommentServiceMockGetCommentsExpectation{}
	}

	if mmGetComments.defaultExpectation.params != nil {
		mmGetComments.mock.t.Fatalf("CommentServiceMock.GetComments mock is already set by Expect")
	}

	if mmGetComments.defaultExpectation.paramPtrs == nil {
		mmGetComments.defaultExpectation.paramPtrs = &CommentServiceMockGetCommentsParamPtrs{}
	}
	mmGetComments.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetComments.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetComments
}

// ExpectPostIDParam2 sets up expected param postID for CommentService.GetComments
func (mmGetComments *mCommentServiceMockGetComments) ExpectPostIDParam2(postID int64) *mCommentServiceMockGetComments {
	if mmGetComments.mock.funcGetComments != nil {
		mmGetComments.mock.t.Fatalf("CommentServiceMock.GetComments mock is already set by Set")
	}

	if mmGetComments.defaultExpectation == nil {
		mmGetComments.defaultExpectation = &CommentServiceMockGetCommentsExpectation{}
	}

	if mmGetComments.defaultExpectation.params != nil {
		mmGetComments.mock.t.Fatalf("CommentServiceMock.GetComments mock is already set by Expect")
	}

	if mmGetComments.defaultExpectation.paramPtrs == nil {
		mmGetComments.defaultExpectation.paramPtrs = &CommentServiceMockGetCommentsParamPtrs{}
	}
	mmGetComments.defaultExpectation.paramPtrs.postID = &postID
	mmGetComments.defaultExpectation.expectationOrigins.originPostID = minimock.CallerInfo(1)

	return mmGetComments
}

// ExpectParentIDParam3 sets up expected param parentID for CommentService.GetComments
func (mmGetComments *mCommentServiceMockGetComments) ExpectParentIDParam3(parentID *int64) *mCommentServiceMockGetComments {
	if mmGetComments.mock.funcGetComments != nil {
		mmGetComments.mock.t.Fatalf("CommentServiceMock.GetComments mock is already set by Set")
	}

	if mmGetComments.defaultExpectation == nil {
		mmGetComments.defaultExpectation = &CommentServiceMockGetCommentsExpectation{}
	}

	if mmGetComments.defaultExpectation.params != nil {
		mmGetComments.mock.t.Fatalf("CommentServiceMock.GetComments mock is already set by Expect")
	}

	if mmGetComments.defaultExpectation.paramPtrs == nil {
		mmGetComments.defaultExpectation.paramPtrs = &CommentServiceMockGetCommentsParamPtrs{}
	}
	mmGetComments.defaultExpectation.paramPtrs.parentID = &parentID
	mmGetComments.defaultExpectation.expectationOrigins.originParentID = minimock.CallerInfo(1)

	return mmGetComments
}

// ExpectLimitParam4 sets up expected param limit for CommentService.GetComments
func (mmGetComments *mCommentServiceMockGetComments) ExpectLimitParam4(limit int32) *mCommentServiceMockGetComments {
	if mmGetComments.mock.funcGetComments != nil {
		mmGetComments.mock.t.Fatalf("CommentServiceMock.GetComments mock is already set by Set")
	}

	if mmGetComments.defaultExpectation == nil {
		mmGetComments.defaultExpectation = &CommentServiceMockGetCommentsExpectation{}
	}

	if mmGetComments.defaultExpectation.params != nil {
		mmGetComments.mock.t.Fatalf("CommentServiceMock.GetComments mock is already set by Expect")
	}

	if mmGetComments.defaultExpectation.paramPtrs == nil {
		mmGetComments.defaultExpectation.paramPtrs = &CommentServiceMockGetCommentsParamPtrs{}
	}
	mmGetComments.defaultExpectation.paramPtrs.limit = &limit
	mmGetComments.defaultExpectation.expectationOrigins.originLimit = minimock.CallerInfo(1)

	return mmGetComments
}

// ExpectOffsetParam5 sets up expected param offset for CommentService.GetComments
func (mmGetComments *mCommentServiceMockGetComments) ExpectOffsetParam5(offset int32) *mCommentServiceMockGetComments {
	if mmGetComments.mock.funcGetComments != nil {
		mmGetComments.mock.t.Fatalf("CommentServiceMock.GetComments mock is already set by Set")
	}

	if mmGetComments.defaultExpectation == nil {
		mmGetComments.defaultExpectation = &CommentServiceMockGetCommentsExpectation{}
	}

	if mmGetComments.defaultExpectation.params != nil {
		mmGetComments.mock.t.Fatalf("CommentServiceMock.GetComments mock is already set by Expect")
	}

	if mmGetComments.defaultExpectation.paramPtrs == nil {
		mmGetComments.defaultExpectation.paramPtrs = &CommentServiceMockGetCommentsParamPtrs{}
	}
	mmGetComments.defaultExpectation.paramPtrs.offset = &offset
	mmGetComments.defaultExpectation.expectationOrigins.originOffset = minimock.CallerInfo(1)

	return mmGetComments
}

// Inspect accepts an inspector function that has same arguments as the CommentService.GetComments
func (mmGetComments *mCommentServiceMockGetComments) Inspect(f func(ctx context.Context, postID int64, parentID *int64, limit int32, offset int32)) *mCommentServiceMockGetComments {
	if mmGetComments.mock.inspectFuncGetComments != nil {
		mmGetComments.mock.t.Fatalf("Inspect function is already set for CommentServiceMock.GetComments")
	}

	mmGetComments.mock.inspectFuncGetComments = f

	return mmGetComments
}

// Return sets up results that will be returned by CommentService.GetComments
func (mmGetComments *mCommentServiceMockGetComments) Return(cpa1 []*model.CommentForPagination, err error) *CommentServiceMock {
	if mmGetComments.mock.funcGetComments != nil {
		mmGetComments.mock.t.Fatalf("CommentServiceMock.GetComments mock is already set by Set")
	}

	if mmGetComments.defaultExpectation == nil {
		mmGetComments.defaultExpectation = &CommentServiceMockGetCommentsExpectation{mock: mmGetComments.mock}
	}
	mmGetComments.defaultExpectation.results = &CommentServiceMockGetCommentsResults{cpa1, err}
	mmGetComments.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetComments.mock
}

// Set uses given function f to mock the CommentService.GetComments method
func (mmGetComments *mCommentServiceMockGetComments) Set(f func(ctx context.Context, postID int64, parentID *int64, limit int32, offset int32) (cpa1 []*model.CommentForPagination, err error)) *CommentServiceMock {
	if mmGetComments.defaultExpectation != nil {
		mmGetComments.mock.t.Fatalf("Default expectation is already set for the CommentService.GetComments method")
	}

	if len(mmGetComments.expectations) > 0 {
		mmGetComments.mock.t.Fatalf("Some expectations are already set for the CommentService.GetComments method")
	}

	mmGetComments.mock.funcGetComments = f
	mmGetComments.mock.funcGetCommentsOrigin = minimock.CallerInfo(1)
	return mmGetComments.mock
}

// When sets expectation for the CommentService.GetComments which will trigger the result defined by the following
// Then helper
func (mmGetComments *mCommentServiceMockGetComments) When(ctx context.Context, postID int64, parentID *int64, limit int32, offset int32) *CommentServiceMockGetCommentsExpectation {
	if mmGetComments.mock.funcGetComments != nil {
		mmGetComments.mock.t.Fatalf("CommentServiceMock.GetComments mock is already set by Set")
	}

	expectation := &CommentServiceMockGetCommentsExpectation{
		mock:               mmGetComments.mock,
		params:             &CommentServiceMockGetCommentsParams{ctx, postID, parentID, limit, offset},
		expectationOrigins: CommentServiceMockGetCommentsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetComments.expectations = append(mmGetComments.expectations, expectation)
	return expectation
}

// Then sets up CommentService.GetComments return parameters for the expectation previously defined by the When method
func (e *CommentServiceMockGetCommentsExpectation) Then(cpa1 []*model.CommentForPagination, err error) *CommentServiceMock {
	e.results = &CommentServiceMockGetCommentsResults{cpa1, err}
	return e.mock
}

// Times sets number of times CommentService.GetComments should be invoked
func (mmGetComments *mCommentServiceMockGetComments) Times(n uint64) *mCommentServiceMockGetComments {
	if n == 0 {
		mmGetComments.mock.t.Fatalf("Times of CommentServiceMock.GetComments mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetComments.expectedInvocations, n)
	mmGetComments.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetComments
}

func (mmGetComments *mCommentServiceMockGetComments) invocationsDone() bool {
	if len(mmGetComments.expectations) == 0 && mmGetComments.defaultExpectation == nil && mmGetComments.mock.funcGetComments == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetComments.mock.afterGetCommentsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetComments.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetComments implements mm_comment.CommentService
func (mmGetComments *CommentServiceMock) GetComments(ctx context.Context, postID int64, parentID *int64, limit int32, offset int32) (cpa1 []*model.CommentForPagination, err error) {
	mm_atomic.AddUint64(&mmGetComments.beforeGetCommentsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetComments.afterGetCommentsCounter, 1)

	mmGetComments.t.Helper()

	if mmGetComments.inspectFuncGetComments != nil {
		mmGetComments.inspectFuncGetComments(ctx, postID, parentID, limit, offset)
	}

	mm_params := CommentServiceMockGetCommentsParams{ctx, postID, parentID, limit, offset}

	// Record call args
	mmGetComments.GetCommentsMock.mutex.Lock()
	mmGetComments.GetCommentsMock.callArgs = append(mmGetComments.GetCommentsMock.callArgs, &mm_params)
	mmGetComments.GetCommentsMock.mutex.Unlock()

	for _, e := range mmGetComments.GetCommentsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cpa1, e.results.err
		}
	}

	if mmGetComments.GetCommentsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetComments.GetCommentsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetComments.GetCommentsMock.defaultExpectation.params
		mm_want_ptrs := mmGetComments.GetCommentsMock.defaultExpectation.paramPtrs

		mm_got := CommentServiceMockGetCommentsParams{ctx, postID, parentID, limit, offset}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetComments.t.Errorf("CommentServiceMock.GetComments got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetComments.GetCommentsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.postID != nil && !minimock.Equal(*mm_want_ptrs.postID, mm_got.postID) {
				mmGetComments.t.Errorf("CommentServiceMock.GetComments got unexpected parameter postID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetComments.GetCommentsMock.defaultExpectation.expectationOrigins.originPostID, *mm_want_ptrs.postID, mm_got.postID, minimock.Diff(*mm_want_ptrs.postID, mm_got.postID))
			}

			if mm_want_ptrs.parentID != nil && !minimock.Equal(*mm_want_ptrs.parentID, mm_got.parentID) {
				mmGetComments.t.Errorf("CommentServiceMock.GetComments got unexpected parameter parentID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetComments.GetCommentsMock.defaultExpectation.expectationOrigins.originParentID, *mm_want_ptrs.parentID, mm_got.parentID, minimock.Diff(*mm_want_ptrs.parentID, mm_got.parentID))
			}

			if mm_want_ptrs.limit != nil && !minimock.Equal(*mm_want_ptrs.limit, mm_got.limit) {
				mmGetComments.t.Errorf("CommentServiceMock.GetComments got unexpected parameter limit, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetComments.GetCommentsMock.defaultExpectation.expectationOrigins.originLimit, *mm_want_ptrs.limit, mm_got.limit, minimock.Diff(*mm_want_ptrs.limit, mm_got.limit))
			}

			if mm_want_ptrs.offset != nil && !minimock.Equal(*mm_want_ptrs.offset, mm_got.offset) {
				mmGetComments.t.Errorf("CommentServiceMock.GetComments got unexpected parameter offset, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetComments.GetCommentsMock.defaultExpectation.expectationOrigins.originOffset, *mm_want_ptrs.offset, mm_got.offset, minimock.Diff(*mm_want_ptrs.offset, mm_got.offset))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetComments.t.Errorf("CommentServiceMock.GetComments got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetComments.GetCommentsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetComments.GetCommentsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetComments.t.Fatal("No results are set for the CommentServiceMock.GetComments")
		}
		return (*mm_results).cpa1, (*mm_results).err
	}
	if mmGetComments.funcGetComments != nil {
		return mmGetComments.funcGetComments(ctx, postID, parentID, limit, offset)
	}
	mmGetComments.t.Fatalf("Unexpected call to CommentServiceMock.GetComments. %v %v %v %v %v", ctx, postID, parentID, limit, offset)
	return
}

// GetCommentsAfterCounter returns a count of finished CommentServiceMock.GetComments invocations
func (mmGetComments *CommentServiceMock) GetCommentsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetComments.afterGetCommentsCounter)
}

// GetCommentsBeforeCounter returns a count of CommentServiceMock.GetComments invocations
func (mmGetComments *CommentServiceMock) GetCommentsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetComments.beforeGetCommentsCounter)
}

// Calls returns a list of arguments used in each call to CommentServiceMock.GetComments.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetComments *mCommentServiceMockGetComments) Calls() []*CommentServiceMockGetCommentsParams {
	mmGetComments.mutex.RLock()

	argCopy := make([]*CommentServiceMockGetCommentsParams, len(mmGetComments.callArgs))
	copy(argCopy, mmGetComments.callArgs)

	mmGetComments.mutex.RUnlock()

	return argCopy
}

// MinimockGetCommentsDone returns true if the count of the GetComments invocations corresponds
// the number of defined expectations
func (m *CommentServiceMock) MinimockGetCommentsDone() bool {
	if m.GetCommentsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetCommentsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetCommentsMock.invocationsDone()
}

// MinimockGetCommentsInspect logs each unmet expectation
func (m *CommentServiceMock) MinimockGetCommentsInspect() {
	for _, e := range m.GetCommentsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommentServiceMock.GetComments at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCommentsCounter := mm_atomic.LoadUint64(&m.afterGetCommentsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetCommentsMock.defaultExpectation != nil && afterGetCommentsCounter < 1 {
		if m.GetCommentsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CommentServiceMock.GetComments at\n%s", m.GetCommentsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CommentServiceMock.GetComments at\n%s with params: %#v", m.GetCommentsMock.defaultExpectation.expectationOrigins.origin, *m.GetCommentsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetComments != nil && afterGetCommentsCounter < 1 {
		m.t.Errorf("Expected call to CommentServiceMock.GetComments at\n%s", m.funcGetCommentsOrigin)
	}

	if !m.GetCommentsMock.invocationsDone() && afterGetCommentsCounter > 0 {
		m.t.Errorf("Expected %d calls to CommentServiceMock.GetComments at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetCommentsMock.expectedInvocations), m.GetCommentsMock.expectedInvocationsOrigin, afterGetCommentsCounter)
	}
}

type mCommentServiceMockGetCommentsByParentID struct {
	optional           bool
	mock               *CommentServiceMock
	defaultExpectation *CommentServiceMockGetCommentsByParentIDExpectation
	expectations       []*CommentServiceMockGetCommentsByParentIDExpectation

	callArgs []*CommentServiceMockGetCommentsByParentIDParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CommentServiceMockGetCommentsByParentIDExpectation specifies expectation struct of the CommentService.GetCommentsByParentID
type CommentServiceMockGetCommentsByParentIDExpectation struct {
	mock               *CommentServiceMock
	params             *CommentServiceMockGetCommentsByParentIDParams
	paramPtrs          *CommentServiceMockGetCommentsByParentIDParamPtrs
	expectationOrigins CommentServiceMockGetCommentsByParentIDExpectationOrigins
	results            *CommentServiceMockGetCommentsByParentIDResults
	returnOrigin       string
	Counter            uint64
}

// CommentServiceMockGetCommentsByParentIDParams contains parameters of the CommentService.GetCommentsByParentID
type CommentServiceMockGetCommentsByParentIDParams struct {
	ctx      context.Context
	parentID int64
	limit    int32
	offset   int32
}

// CommentServiceMockGetCommentsByParentIDParamPtrs contains pointers to parameters of the CommentService.GetCommentsByParentID
type CommentServiceMockGetCommentsByParentIDParamPtrs struct {
	ctx      *context.Context
	parentID *int64
	limit    *int32
	offset   *int32
}

// CommentServiceMockGetCommentsByParentIDResults contains results of the CommentService.GetCommentsByParentID
type CommentServiceMockGetCommentsByParentIDResults struct {
	cpa1 []*model.CommentForPagination
	err  error
}

// CommentServiceMockGetCommentsByParentIDOrigins contains origins of expectations of the CommentService.GetCommentsByParentID
type CommentServiceMockGetCommentsByParentIDExpectationOrigins struct {
	origin         string
	originCtx      string
	originParentID string
	originLimit    string
	originOffset   string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetCommentsByParentID *mCommentServiceMockGetCommentsByParentID) Optional() *mCommentServiceMockGetCommentsByParentID {
	mmGetCommentsByParentID.optional = true
	return mmGetCommentsByParentID
}

// Expect sets up expected params for CommentService.GetCommentsByParentID
func (mmGetCommentsByParentID *mCommentServiceMockGetCommentsByParentID) Expect(ctx context.Context, parentID int64, limit int32, offset int32) *mCommentServiceMockGetCommentsByParentID {
	if mmGetCommentsByParentID.mock.funcGetCommentsByParentID != nil {
		mmGetCommentsByParentID.mock.t.Fatalf("CommentServiceMock.GetCommentsByParentID mock is already set by Set")
	}

	if mmGetCommentsByParentID.defaultExpectation == nil {
		mmGetCommentsByParentID.defaultExpectation = &CommentServiceMockGetCommentsByParentIDExpectation{}
	}

	if mmGetCommentsByParentID.defaultExpectation.paramPtrs != nil {
		mmGetCommentsByParentID.mock.t.Fatalf("CommentServiceMock.GetCommentsByParentID mock is already set by ExpectParams functions")
	}

	mmGetCommentsByParentID.defaultExpectation.params = &CommentServiceMockGetCommentsByParentIDParams{ctx, parentID, limit, offset}
	mmGetCommentsByParentID.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetCommentsByParentID.expectations {
		if minimock.Equal(e.params, mmGetCommentsByParentID.defaultExpectation.params) {
			mmGetCommentsByParentID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetCommentsByParentID.defaultExpectation.params)
		}
	}

	return mmGetCommentsByParentID
}

// ExpectCtxParam1 sets up expected param ctx for CommentService.GetCommentsByParentID
func (mmGetCommentsByParentID *mCommentServiceMockGetCommentsByParentID) ExpectCtxParam1(ctx context.Context) *mCommentServiceMockGetCommentsByParentID {
	if mmGetCommentsByParentID.mock.funcGetCommentsByParentID != nil {
		mmGetCommentsByParentID.mock.t.Fatalf("CommentServiceMock.GetCommentsByParentID mock is already set by Set")
	}

	if mmGetCommentsByParentID.defaultExpectation == nil {
		mmGetCommentsByParentID.defaultExpectation = &CommentServiceMockGetCommentsByParentIDExpectation{}
	}

	if mmGetCommentsByParentID.defaultExpectation.params != nil {
		mmGetCommentsByParentID.mock.t.Fatalf("CommentServiceMock.GetCommentsByParentID mock is already set by Expect")
	}

	if mmGetCommentsByParentID.defaultExpectation.paramPtrs == nil {
		mmGetCommentsByParentID.defaultExpectation.paramPtrs = &CommentServiceMockGetCommentsByParentIDParamPtrs{}
	}
	mmGetCommentsByParentID.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetCommentsByParentID.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetCommentsByParentID
}

// ExpectParentIDParam2 sets up expected param parentID for CommentService.GetCommentsByParentID
func (mmGetCommentsByParentID *mCommentServiceMockGetCommentsByParentID) ExpectParentIDParam2(parentID int64) *mCommentServiceMockGetCommentsByParentID {
	if mmGetCommentsByParentID.mock.funcGetCommentsByParentID != nil {
		mmGetCommentsByParentID.mock.t.Fatalf("CommentServiceMock.GetCommentsByParentID mock is already set by Set")
	}

	if mmGetCommentsByParentID.defaultExpectation == nil {
		mmGetCommentsByParentID.defaultExpectation = &CommentServiceMockGetCommentsByParentIDExpectation{}
	}

	if mmGetCommentsByParentID.defaultExpectation.params != nil {
		mmGetCommentsByParentID.mock.t.Fatalf("CommentServiceMock.GetCommentsByParentID mock is already set by Expect")
	}

	if mmGetCommentsByParentID.defaultExpectation.paramPtrs == nil {
		mmGetCommentsByParentID.defaultExpectation.paramPtrs = &CommentServiceMockGetCommentsByParentIDParamPtrs{}
	}
	mmGetCommentsByParentID.defaultExpectation.paramPtrs.parentID = &parentID
	mmGetCommentsByParentID.defaultExpectation.expectationOrigins.originParentID = minimock.CallerInfo(1)

	return mmGetCommentsByParentID
}

// ExpectLimitParam3 sets up expected param limit for CommentService.GetCommentsByParentID
func (mmGetCommentsByParentID *mCommentServiceMockGetCommentsByParentID) ExpectLimitParam3(limit int32) *mCommentServiceMockGetCommentsByParentID {
	if mmGetCommentsByParentID.mock.funcGetCommentsByParentID != nil {
		mmGetCommentsByParentID.mock.t.Fatalf("CommentServiceMock.GetCommentsByParentID mock is already set by Set")
	}

	if mmGetCommentsByParentID.defaultExpectation == nil {
		mmGetCommentsByParentID.defaultExpectation = &CommentServiceMockGetCommentsByParentIDExpectation{}
	}

	if mmGetCommentsByParentID.defaultExpectation.params != nil {
		mmGetCommentsByParentID.mock.t.Fatalf("CommentServiceMock.GetCommentsByParentID mock is already set by Expect")
	}

	if mmGetCommentsByParentID.defaultExpectation.paramPtrs == nil {
		mmGetCommentsByParentID.defaultExpectation.paramPtrs = &CommentServiceMockGetCommentsByParentIDParamPtrs{}
	}
	mmGetCommentsByParentID.defaultExpectation.paramPtrs.limit = &limit
	mmGetCommentsByParentID.defaultExpectation.expectationOrigins.originLimit = minimock.CallerInfo(1)

	return mmGetCommentsByParentID
}

// ExpectOffsetParam4 sets up expected param offset for CommentService.GetCommentsByParentID
func (mmGetCommentsByParentID *mCommentServiceMockGetCommentsByParentID) ExpectOffsetParam4(offset int32) *mCommentServiceMockGetCommentsByParentID {
	if mmGetCommentsByParentID.mock.funcGetCommentsByParentID != nil {
		mmGetCommentsByParentID.mock.t.Fatalf("CommentServiceMock.GetCommentsByParentID mock is already set by Set")
	}

	if mmGetCommentsByParentID.defaultExpectation == nil {
		mmGetCommentsByParentID.defaultExpectation = &CommentServiceMockGetCommentsByParentIDExpectation{}
	}

	if mmGetCommentsByParentID.defaultExpectation.params != nil {
		mmGetCommentsByParentID.mock.t.Fatalf("CommentServiceMock.GetCommentsByParentID mock is already set by Expect")
	}

	if mmGetCommentsByParentID.defaultExpectation.paramPtrs == nil {
		mmGetCommentsByParentID.defaultExpectation.paramPtrs = &CommentServiceMockGetCommentsByParentIDParamPtrs{}
	}
	mmGetCommentsByParentID.defaultExpectation.paramPtrs.offset = &offset
	mmGetCommentsByParentID.defaultExpectation.expectationOrigins.originOffset = minimock.CallerInfo(1)

	return mmGetCommentsByParentID
}

// Inspect accepts an inspector function that has same arguments as the CommentService.GetCommentsByParentID
func (mmGetCommentsByParentID *mCommentServiceMockGetCommentsByParentID) Inspect(f func(ctx context.Context, parentID int64, limit int32, offset int32)) *mCommentServiceMockGetCommentsByParentID {
	if mmGetCommentsByParentID.mock.inspectFuncGetCommentsByParentID != nil {
		mmGetCommentsByParentID.mock.t.Fatalf("Inspect function is already set for CommentServiceMock.GetCommentsByParentID")
	}

	mmGetCommentsByParentID.mock.inspectFuncGetCommentsByParentID = f

	return mmGetCommentsByParentID
}

// Return sets up results that will be returned by CommentService.GetCommentsByParentID
func (mmGetCommentsByParentID *mCommentServiceMockGetCommentsByParentID) Return(cpa1 []*model.CommentForPagination, err error) *CommentServiceMock {
	if mmGetCommentsByParentID.mock.funcGetCommentsByParentID != nil {
		mmGetCommentsByParentID.mock.t.Fatalf("CommentServiceMock.GetCommentsByParentID mock is already set by Set")
	}

	if mmGetCommentsByParentID.defaultExpectation == nil {
		mmGetCommentsByParentID.defaultExpectation = &CommentServiceMockGetCommentsByParentIDExpectation{mock: mmGetCommentsByParentID.mock}
	}
	mmGetCommentsByParentID.defaultExpectation.results = &CommentServiceMockGetCommentsByParentIDResults{cpa1, err}
	mmGetCommentsByParentID.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetCommentsByParentID.mock
}

// Set uses given function f to mock the CommentService.GetCommentsByParentID method
func (mmGetCommentsByParentID *mCommentServiceMockGetCommentsByParentID) Set(f func(ctx context.Context, parentID int64, limit int32, offset int32) (cpa1 []*model.CommentForPagination, err error)) *CommentServiceMock {
	if mmGetCommentsByParentID.defaultExpectation != nil {
		mmGetCommentsByParentID.mock.t.Fatalf("Default expectation is already set for the CommentService.GetCommentsByParentID method")
	}

	if len(mmGetCommentsByParentID.expectations) > 0 {
		mmGetCommentsByParentID.mock.t.Fatalf("Some expectations are already set for the CommentService.GetCommentsByParentID method")
	}

	mmGetCommentsByParentID.mock.funcGetCommentsByParentID = f
	mmGetCommentsByParentID.mock.funcGetCommentsByParentIDOrigin = minimock.CallerInfo(1)
	return mmGetCommentsByParentID.mock
}

// When sets expectation for the CommentService.GetCommentsByParentID which will trigger the result defined by the following
// Then helper
func (mmGetCommentsByParentID *mCommentServiceMockGetCommentsByParentID) When(ctx context.Context, parentID int64, limit int32, offset int32) *CommentServiceMockGetCommentsByParentIDExpectation {
	if mmGetCommentsByParentID.mock.funcGetCommentsByParentID != nil {
		mmGetCommentsByParentID.mock.t.Fatalf("CommentServiceMock.GetCommentsByParentID mock is already set by Set")
	}

	expectation := &CommentServiceMockGetCommentsByParentIDExpectation{
		mock:               mmGetCommentsByParentID.mock,
		params:             &CommentServiceMockGetCommentsByParentIDParams{ctx, parentID, limit, offset},
		expectationOrigins: CommentServiceMockGetCommentsByParentIDExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetCommentsByParentID.expectations = append(mmGetCommentsByParentID.expectations, expectation)
	return expectation
}

// Then sets up CommentService.GetCommentsByParentID return parameters for the expectation previously defined by the When method
func (e *CommentServiceMockGetCommentsByParentIDExpectation) Then(cpa1 []*model.CommentForPagination, err error) *CommentServiceMock {
	e.results = &CommentServiceMockGetCommentsByParentIDResults{cpa1, err}
	return e.mock
}

// Times sets number of times CommentService.GetCommentsByParentID should be invoked
func (mmGetCommentsByParentID *mCommentServiceMockGetCommentsByParentID) Times(n uint64) *mCommentServiceMockGetCommentsByParentID {
	if n == 0 {
		mmGetCommentsByParentID.mock.t.Fatalf("Times of CommentServiceMock.GetCommentsByParentID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetCommentsByParentID.expectedInvocations, n)
	mmGetCommentsByParentID.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetCommentsByParentID
}

func (mmGetCommentsByParentID *mCommentServiceMockGetCommentsByParentID) invocationsDone() bool {
	if len(mmGetCommentsByParentID.expectations) == 0 && mmGetCommentsByParentID.defaultExpectation == nil && mmGetCommentsByParentID.mock.funcGetCommentsByParentID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetCommentsByParentID.mock.afterGetCommentsByParentIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetCommentsByParentID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetCommentsByParentID implements mm_comment.CommentService
func (mmGetCommentsByParentID *CommentServiceMock) GetCommentsByParentID(ctx context.Context, parentID int64, limit int32, offset int32) (cpa1 []*model.CommentForPagination, err error) {
	mm_atomic.AddUint64(&mmGetCommentsByParentID.beforeGetCommentsByParentIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCommentsByParentID.afterGetCommentsByParentIDCounter, 1)

	mmGetCommentsByParentID.t.Helper()

	if mmGetCommentsByParentID.inspectFuncGetCommentsByParentID != nil {
		mmGetCommentsByParentID.inspectFuncGetCommentsByParentID(ctx, parentID, limit, offset)
	}

	mm_params := CommentServiceMockGetCommentsByParentIDParams{ctx, parentID, limit, offset}

	// Record call args
	mmGetCommentsByParentID.GetCommentsByParentIDMock.mutex.Lock()
	mmGetCommentsByParentID.GetCommentsByParentIDMock.callArgs = append(mmGetCommentsByParentID.GetCommentsByParentIDMock.callArgs, &mm_params)
	mmGetCommentsByParentID.GetCommentsByParentIDMock.mutex.Unlock()

	for _, e := range mmGetCommentsByParentID.GetCommentsByParentIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cpa1, e.results.err
		}
	}

	if mmGetCommentsByParentID.GetCommentsByParentIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCommentsByParentID.GetCommentsByParentIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetCommentsByParentID.GetCommentsByParentIDMock.defaultExpectation.params
		mm_want_ptrs := mmGetCommentsByParentID.GetCommentsByParentIDMock.defaultExpectation.paramPtrs

		mm_got := CommentServiceMockGetCommentsByParentIDParams{ctx, parentID, limit, offset}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetCommentsByParentID.t.Errorf("CommentServiceMock.GetCommentsByParentID got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCommentsByParentID.GetCommentsByParentIDMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.parentID != nil && !minimock.Equal(*mm_want_ptrs.parentID, mm_got.parentID) {
				mmGetCommentsByParentID.t.Errorf("CommentServiceMock.GetCommentsByParentID got unexpected parameter parentID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCommentsByParentID.GetCommentsByParentIDMock.defaultExpectation.expectationOrigins.originParentID, *mm_want_ptrs.parentID, mm_got.parentID, minimock.Diff(*mm_want_ptrs.parentID, mm_got.parentID))
			}

			if mm_want_ptrs.limit != nil && !minimock.Equal(*mm_want_ptrs.limit, mm_got.limit) {
				mmGetCommentsByParentID.t.Errorf("CommentServiceMock.GetCommentsByParentID got unexpected parameter limit, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCommentsByParentID.GetCommentsByParentIDMock.defaultExpectation.expectationOrigins.originLimit, *mm_want_ptrs.limit, mm_got.limit, minimock.Diff(*mm_want_ptrs.limit, mm_got.limit))
			}

			if mm_want_ptrs.offset != nil && !minimock.Equal(*mm_want_ptrs.offset, mm_got.offset) {
				mmGetCommentsByParentID.t.Errorf("CommentServiceMock.GetCommentsByParentID got unexpected parameter offset, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCommentsByParentID.GetCommentsByParentIDMock.defaultExpectation.expectationOrigins.originOffset, *mm_want_ptrs.offset, mm_got.offset, minimock.Diff(*mm_want_ptrs.offset, mm_got.offset))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetCommentsByParentID.t.Errorf("CommentServiceMock.GetCommentsByParentID got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetCommentsByParentID.GetCommentsByParentIDMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetCommentsByParentID.GetCommentsByParentIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetCommentsByParentID.t.Fatal("No results are set for the CommentServiceMock.GetCommentsByParentID")
		}
		return (*mm_results).cpa1, (*mm_results).err
	}
	if mmGetCommentsByParentID.funcGetCommentsByParentID != nil {
		return mmGetCommentsByParentID.funcGetCommentsByParentID(ctx, parentID, limit, offset)
	}
	mmGetCommentsByParentID.t.Fatalf("Unexpected call to CommentServiceMock.GetCommentsByParentID. %v %v %v %v", ctx, parentID, limit, offset)
	return
}

// GetCommentsByParentIDAfterCounter returns a count of finished CommentServiceMock.GetCommentsByParentID invocations
func (mmGetCommentsByParentID *CommentServiceMock) GetCommentsByParentIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCommentsByParentID.afterGetCommentsByParentIDCounter)
}

// GetCommentsByParentIDBeforeCounter returns a count of CommentServiceMock.GetCommentsByParentID invocations
func (mmGetCommentsByParentID *CommentServiceMock) GetCommentsByParentIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCommentsByParentID.beforeGetCommentsByParentIDCounter)
}

// Calls returns a list of arguments used in each call to CommentServiceMock.GetCommentsByParentID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetCommentsByParentID *mCommentServiceMockGetCommentsByParentID) Calls() []*CommentServiceMockGetCommentsByParentIDParams {
	mmGetCommentsByParentID.mutex.RLock()

	argCopy := make([]*CommentServiceMockGetCommentsByParentIDParams, len(mmGetCommentsByParentID.callArgs))
	copy(argCopy, mmGetCommentsByParentID.callArgs)

	mmGetCommentsByParentID.mutex.RUnlock()

	return argCopy
}

// MinimockGetCommentsByParentIDDone returns true if the count of the GetCommentsByParentID invocations corresponds
// the number of defined expectations
func (m *CommentServiceMock) MinimockGetCommentsByParentIDDone() bool {
	if m.GetCommentsByParentIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetCommentsByParentIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetCommentsByParentIDMock.invocationsDone()
}

// MinimockGetCommentsByParentIDInspect logs each unmet expectation
func (m *CommentServiceMock) MinimockGetCommentsByParentIDInspect() {
	for _, e := range m.GetCommentsByParentIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommentServiceMock.GetCommentsByParentID at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCommentsByParentIDCounter := mm_atomic.LoadUint64(&m.afterGetCommentsByParentIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetCommentsByParentIDMock.defaultExpectation != nil && afterGetCommentsByParentIDCounter < 1 {
		if m.GetCommentsByParentIDMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CommentServiceMock.GetCommentsByParentID at\n%s", m.GetCommentsByParentIDMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CommentServiceMock.GetCommentsByParentID at\n%s with params: %#v", m.GetCommentsByParentIDMock.defaultExpectation.expectationOrigins.origin, *m.GetCommentsByParentIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCommentsByParentID != nil && afterGetCommentsByParentIDCounter < 1 {
		m.t.Errorf("Expected call to CommentServiceMock.GetCommentsByParentID at\n%s", m.funcGetCommentsByParentIDOrigin)
	}

	if !m.GetCommentsByParentIDMock.invocationsDone() && afterGetCommentsByParentIDCounter > 0 {
		m.t.Errorf("Expected %d calls to CommentServiceMock.GetCommentsByParentID at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetCommentsByParentIDMock.expectedInvocations), m.GetCommentsByParentIDMock.expectedInvocationsOrigin, afterGetCommentsByParentIDCounter)
	}
}

type mCommentServiceMockGetCommentsByPostIDs struct {
	optional           bool
	mock               *CommentServiceMock
	defaultExpectation *CommentServiceMockGetCommentsByPostIDsExpectation
	expectations       []*CommentServiceMockGetCommentsByPostIDsExpectation

	callArgs []*CommentServiceMockGetCommentsByPostIDsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CommentServiceMockGetCommentsByPostIDsExpectation specifies expectation struct of the CommentService.GetCommentsByPostIDs
type CommentServiceMockGetCommentsByPostIDsExpectation struct {
	mock               *CommentServiceMock
	params             *CommentServiceMockGetCommentsByPostIDsParams
	paramPtrs          *CommentServiceMockGetCommentsByPostIDsParamPtrs
	expectationOrigins CommentServiceMockGetCommentsByPostIDsExpectationOrigins
	results            *CommentServiceMockGetCommentsByPostIDsResults
	returnOrigin       string
	Counter            uint64
}

// CommentServiceMockGetCommentsByPostIDsParams contains parameters of the CommentService.GetCommentsByPostIDs
type CommentServiceMockGetCommentsByPostIDsParams struct {
	ctx     context.Context
	postIDs []int64
	limit   int32
	offset  int32
}

// CommentServiceMockGetCommentsByPostIDsParamPtrs contains pointers to parameters of the CommentService.GetCommentsByPostIDs
type CommentServiceMockGetCommentsByPostIDsParamPtrs struct {
	ctx     *context.Context
	postIDs *[]int64
	limit   *int32
	offset  *int32
}

// CommentServiceMockGetCommentsByPostIDsResults contains results of the CommentService.GetCommentsByPostIDs
type CommentServiceMockGetCommentsByPostIDsResults struct {
	m1  map[int64][]*model.CommentForPagination
	err error
}

// CommentServiceMockGetCommentsByPostIDsOrigins contains origins of expectations of the CommentService.GetCommentsByPostIDs
type CommentServiceMockGetCommentsByPostIDsExpectationOrigins struct {
	origin        string
	originCtx     string
	originPostIDs string
	originLimit   string
	originOffset  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetCommentsByPostIDs *mCommentServiceMockGetCommentsByPostIDs) Optional() *mCommentServiceMockGetCommentsByPostIDs {
	mmGetCommentsByPostIDs.optional = true
	return mmGetCommentsByPostIDs
}

// Expect sets up expected params for CommentService.GetCommentsByPostIDs
func (mmGetCommentsByPostIDs *mCommentServiceMockGetCommentsByPostIDs) Expect(ctx context.Context, postIDs []int64, limit int32, offset int32) *mCommentServiceMockGetCommentsByPostIDs {
	if mmGetCommentsByPostIDs.mock.funcGetCommentsByPostIDs != nil {
		mmGetCommentsByPostIDs.mock.t.Fatalf("CommentServiceMock.GetCommentsByPostIDs mock is already set by Set")
	}

	if mmGetCommentsByPostIDs.defaultExpectation == nil {
		mmGetCommentsByPostIDs.defaultExpectation = &CommentServiceMockGetCommentsByPostIDsExpectation{}
	}

	if mmGetCommentsByPostIDs.defaultExpectation.paramPtrs != nil {
		mmGetCommentsByPostIDs.mock.t.Fatalf("CommentServiceMock.GetCommentsByPostIDs mock is already set by ExpectParams functions")
	}

	mmGetCommentsByPostIDs.defaultExpectation.params = &CommentServiceMockGetCommentsByPostIDsParams{ctx, postIDs, limit, offset}
	mmGetCommentsByPostIDs.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetCommentsByPostIDs.expectations {
		if minimock.Equal(e.params, mmGetCommentsByPostIDs.defaultExpectation.params) {
			mmGetCommentsByPostIDs.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetCommentsByPostIDs.defaultExpectation.params)
		}
	}

	return mmGetCommentsByPostIDs
}

// ExpectCtxParam1 sets up expected param ctx for CommentService.GetCommentsByPostIDs
func (mmGetCommentsByPostIDs *mCommentServiceMockGetCommentsByPostIDs) ExpectCtxParam1(ctx context.Context) *mCommentServiceMockGetCommentsByPostIDs {
	if mmGetCommentsByPostIDs.mock.funcGetCommentsByPostIDs != nil {
		mmGetCommentsByPostIDs.mock.t.Fatalf("CommentServiceMock.GetCommentsByPostIDs mock is already set by Set")
	}

	if mmGetCommentsByPostIDs.defaultExpectation == nil {
		mmGetCommentsByPostIDs.defaultExpectation = &CommentServiceMockGetCommentsByPostIDsExpectation{}
	}

	if mmGetCommentsByPostIDs.defaultExpectation.params != nil {
		mmGetCommentsByPostIDs.mock.t.Fatalf("CommentServiceMock.GetCommentsByPostIDs mock is already set by Expect")
	}

	if mmGetCommentsByPostIDs.defaultExpectation.paramPtrs == nil {
		mmGetCommentsByPostIDs.defaultExpectation.paramPtrs = &CommentServiceMockGetCommentsByPostIDsParamPtrs{}
	}
	mmGetCommentsByPostIDs.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetCommentsByPostIDs.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetCommentsByPostIDs
}

// ExpectPostIDsParam2 sets up expected param postIDs for CommentService.GetCommentsByPostIDs
func (mmGetCommentsByPostIDs *mCommentServiceMockGetCommentsByPostIDs) ExpectPostIDsParam2(postIDs []int64) *mCommentServiceMockGetCommentsByPostIDs {
	if mmGetCommentsByPostIDs.mock.funcGetCommentsByPostIDs != nil {
		mmGetCommentsByPostIDs.mock.t.Fatalf("CommentServiceMock.GetCommentsByPostIDs mock is already set by Set")
	}

	if mmGetCommentsByPostIDs.defaultExpectation == nil {
		mmGetCommentsByPostIDs.defaultExpectation = &CommentServiceMockGetCommentsByPostIDsExpectation{}
	}

	if mmGetCommentsByPostIDs.defaultExpectation.params != nil {
		mmGetCommentsByPostIDs.mock.t.Fatalf("CommentServiceMock.GetCommentsByPostIDs mock is already set by Expect")
	}

	if mmGetCommentsByPostIDs.defaultExpectation.paramPtrs == nil {
		mmGetCommentsByPostIDs.defaultExpectation.paramPtrs = &CommentServiceMockGetCommentsByPostIDsParamPtrs{}
	}
	mmGetCommentsByPostIDs.defaultExpectation.paramPtrs.postIDs = &postIDs
	mmGetCommentsByPostIDs.defaultExpectation.expectationOrigins.originPostIDs = minimock.CallerInfo(1)

	return mmGetCommentsByPostIDs
}

// ExpectLimitParam3 sets up expected param limit for CommentService.GetCommentsByPostIDs
func (mmGetCommentsByPostIDs *mCommentServiceMockGetCommentsByPostIDs) ExpectLimitParam3(limit int32) *mCommentServiceMockGetCommentsByPostIDs {
	if mmGetCommentsByPostIDs.mock.funcGetCommentsByPostIDs != nil {
		mmGetCommentsByPostIDs.mock.t.Fatalf("CommentServiceMock.GetCommentsByPostIDs mock is already set by Set")
	}

	if mmGetCommentsByPostIDs.defaultExpectation == nil {
		mmGetCommentsByPostIDs.defaultExpectation = &CommentServiceMockGetCommentsByPostIDsExpectation{}
	}

	if mmGetCommentsByPostIDs.defaultExpectation.params != nil {
		mmGetCommentsByPostIDs.mock.t.Fatalf("CommentServiceMock.GetCommentsByPostIDs mock is already set by Expect")
	}

	if mmGetCommentsByPostIDs.defaultExpectation.paramPtrs == nil {
		mmGetCommentsByPostIDs.defaultExpectation.paramPtrs = &CommentServiceMockGetCommentsByPostIDsParamPtrs{}
	}
	mmGetCommentsByPostIDs.defaultExpectation.paramPtrs.limit = &limit
	mmGetCommentsByPostIDs.defaultExpectation.expectationOrigins.originLimit = minimock.CallerInfo(1)

	return mmGetCommentsByPostIDs
}

// ExpectOffsetParam4 sets up expected param offset for CommentService.GetCommentsByPostIDs
func (mmGetCommentsByPostIDs *mCommentServiceMockGetCommentsByPostIDs) ExpectOffsetParam4(offset int32) *mCommentServiceMockGetCommentsByPostIDs {
	if mmGetCommentsByPostIDs.mock.funcGetCommentsByPostIDs != nil {
		mmGetCommentsByPostIDs.mock.t.Fatalf("CommentServiceMock.GetCommentsByPostIDs mock is already set by Set")
	}

	if mmGetCommentsByPostIDs.defaultExpectation == nil {
		mmGetCommentsByPostIDs.defaultExpectation = &CommentServiceMockGetCommentsByPostIDsExpectation{}
	}

	if mmGetCommentsByPostIDs.defaultExpectation.params != nil {
		mmGetCommentsByPostIDs.mock.t.Fatalf("CommentServiceMock.GetCommentsByPostIDs mock is already set by Expect")
	}

	if mmGetCommentsByPostIDs.defaultExpectation.paramPtrs == nil {
		mmGetCommentsByPostIDs.defaultExpectation.paramPtrs = &CommentServiceMockGetCommentsByPostIDsParamPtrs{}
	}
	mmGetCommentsByPostIDs.defaultExpectation.paramPtrs.offset = &offset
	mmGetCommentsByPostIDs.defaultExpectation.expectationOrigins.originOffset = minimock.CallerInfo(1)

	return mmGetCommentsByPostIDs
}

// Inspect accepts an inspector function that has same arguments as the CommentService.GetCommentsByPostIDs
func (mmGetCommentsByPostIDs *mCommentServiceMockGetCommentsByPostIDs) Inspect(f func(ctx context.Context, postIDs []int64, limit int32, offset int32)) *mCommentServiceMockGetCommentsByPostIDs {
	if mmGetCommentsByPostIDs.mock.inspectFuncGetCommentsByPostIDs != nil {
		mmGetCommentsByPostIDs.mock.t.Fatalf("Inspect function is already set for CommentServiceMock.GetCommentsByPostIDs")
	}

	mmGetCommentsByPostIDs.mock.inspectFuncGetCommentsByPostIDs = f

	return mmGetCommentsByPostIDs
}

// Return sets up results that will be returned by CommentService.GetCommentsByPostIDs
func (mmGetCommentsByPostIDs *mCommentServiceMockGetCommentsByPostIDs) Return(m1 map[int64][]*model.CommentForPagination, err error) *CommentServiceMock {
	if mmGetCommentsByPostIDs.mock.funcGetCommentsByPostIDs != nil {
		mmGetCommentsByPostIDs.mock.t.Fatalf("CommentServiceMock.GetCommentsByPostIDs mock is already set by Set")
	}

	if mmGetCommentsByPostIDs.defaultExpectation == nil {
		mmGetCommentsByPostIDs.defaultExpectation = &CommentServiceMockGetCommentsByPostIDsExpectation{mock: mmGetCommentsByPostIDs.mock}
	}
	mmGetCommentsByPostIDs.defaultExpectation.results = &CommentServiceMockGetCommentsByPostIDsResults{m1, err}
	mmGetCommentsByPostIDs.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetCommentsByPostIDs.mock
}

// Set uses given function f to mock the CommentService.GetCommentsByPostIDs method
func (mmGetCommentsByPostIDs *mCommentServiceMockGetCommentsByPostIDs) Set(f func(ctx context.Context, postIDs []int64, limit int32, offset int32) (m1 map[int64][]*model.CommentForPagination, err error)) *CommentServiceMock {
	if mmGetCommentsByPostIDs.defaultExpectation != nil {
		mmGetCommentsByPostIDs.mock.t.Fatalf("Default expectation is already set for the CommentService.GetCommentsByPostIDs method")
	}

	if len(mmGetCommentsByPostIDs.expectations) > 0 {
		mmGetCommentsByPostIDs.mock.t.Fatalf("Some expectations are already set for the CommentService.GetCommentsByPostIDs method")
	}

	mmGetCommentsByPostIDs.mock.funcGetCommentsByPostIDs = f
	mmGetCommentsByPostIDs.mock.funcGetCommentsByPostIDsOrigin = minimock.CallerInfo(1)
	return mmGetCommentsByPostIDs.mock
}

// When sets expectation for the CommentService.GetCommentsByPostIDs which will trigger the result defined by the following
// Then helper
func (mmGetCommentsByPostIDs *mCommentServiceMockGetCommentsByPostIDs) When(ctx context.Context, postIDs []int64, limit int32, offset int32) *CommentServiceMockGetCommentsByPostIDsExpectation {
	if mmGetCommentsByPostIDs.mock.funcGetCommentsByPostIDs != nil {
		mmGetCommentsByPostIDs.mock.t.Fatalf("CommentServiceMock.GetCommentsByPostIDs mock is already set by Set")
	}

	expectation := &CommentServiceMockGetCommentsByPostIDsExpectation{
		mock:               mmGetCommentsByPostIDs.mock,
		params:             &CommentServiceMockGetCommentsByPostIDsParams{ctx, postIDs, limit, offset},
		expectationOrigins: CommentServiceMockGetCommentsByPostIDsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetCommentsByPostIDs.expectations = append(mmGetCommentsByPostIDs.expectations, expectation)
	return expectation
}

// Then sets up CommentService.GetCommentsByPostIDs return parameters for the expectation previously defined by the When method
func (e *CommentServiceMockGetCommentsByPostIDsExpectation) Then(m1 map[int64][]*model.CommentForPagination, err error) *CommentServiceMock {
	e.results = &CommentServiceMockGetCommentsByPostIDsResults{m1, err}
	return e.mock
}

// Times sets number of times CommentService.GetCommentsByPostIDs should be invoked
func (mmGetCommentsByPostIDs *mCommentServiceMockGetCommentsByPostIDs) Times(n uint64) *mCommentServiceMockGetCommentsByPostIDs {
	if n == 0 {
		mmGetCommentsByPostIDs.mock.t.Fatalf("Times of CommentServiceMock.GetCommentsByPostIDs mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetCommentsByPostIDs.expectedInvocations, n)
	mmGetCommentsByPostIDs.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetCommentsByPostIDs
}

func (mmGetCommentsByPostIDs *mCommentServiceMockGetCommentsByPostIDs) invocationsDone() bool {
	if len(mmGetCommentsByPostIDs.expectations) == 0 && mmGetCommentsByPostIDs.defaultExpectation == nil && mmGetCommentsByPostIDs.mock.funcGetCommentsByPostIDs == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetCommentsByPostIDs.mock.afterGetCommentsByPostIDsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetCommentsByPostIDs.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetCommentsByPostIDs implements mm_comment.CommentService
func (mmGetCommentsByPostIDs *CommentServiceMock) GetCommentsByPostIDs(ctx context.Context, postIDs []int64, limit int32, offset int32) (m1 map[int64][]*model.CommentForPagination, err error) {
	mm_atomic.AddUint64(&mmGetCommentsByPostIDs.beforeGetCommentsByPostIDsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCommentsByPostIDs.afterGetCommentsByPostIDsCounter, 1)

	mmGetCommentsByPostIDs.t.Helper()

	if mmGetCommentsByPostIDs.inspectFuncGetCommentsByPostIDs != nil {
		mmGetCommentsByPostIDs.inspectFuncGetCommentsByPostIDs(ctx, postIDs, limit, offset)
	}

	mm_params := CommentServiceMockGetCommentsByPostIDsParams{ctx, postIDs, limit, offset}

	// Record call args
	mmGetCommentsByPostIDs.GetCommentsByPostIDsMock.mutex.Lock()
	mmGetCommentsByPostIDs.GetCommentsByPostIDsMock.callArgs = append(mmGetCommentsByPostIDs.GetCommentsByPostIDsMock.callArgs, &mm_params)
	mmGetCommentsByPostIDs.GetCommentsByPostIDsMock.mutex.Unlock()

	for _, e := range mmGetCommentsByPostIDs.GetCommentsByPostIDsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.m1, e.results.err
		}
	}

	if mmGetCommentsByPostIDs.GetCommentsByPostIDsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCommentsByPostIDs.GetCommentsByPostIDsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetCommentsByPostIDs.GetCommentsByPostIDsMock.defaultExpectation.params
		mm_want_ptrs := mmGetCommentsByPostIDs.GetCommentsByPostIDsMock.defaultExpectation.paramPtrs

		mm_got := CommentServiceMockGetCommentsByPostIDsParams{ctx, postIDs, limit, offset}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetCommentsByPostIDs.t.Errorf("CommentServiceMock.GetCommentsByPostIDs got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCommentsByPostIDs.GetCommentsByPostIDsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.postIDs != nil && !minimock.Equal(*mm_want_ptrs.postIDs, mm_got.postIDs) {
				mmGetCommentsByPostIDs.t.Errorf("CommentServiceMock.GetCommentsByPostIDs got unexpected parameter postIDs, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCommentsByPostIDs.GetCommentsByPostIDsMock.defaultExpectation.expectationOrigins.originPostIDs, *mm_want_ptrs.postIDs, mm_got.postIDs, minimock.Diff(*mm_want_ptrs.postIDs, mm_got.postIDs))
			}

			if mm_want_ptrs.limit != nil && !minimock.Equal(*mm_want_ptrs.limit, mm_got.limit) {
				mmGetCommentsByPostIDs.t.Errorf("CommentServiceMock.GetCommentsByPostIDs got unexpected parameter limit, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCommentsByPostIDs.GetCommentsByPostIDsMock.defaultExpectation.expectationOrigins.originLimit, *mm_want_ptrs.limit, mm_got.limit, minimock.Diff(*mm_want_ptrs.limit, mm_got.limit))
			}

			if mm_want_ptrs.offset != nil && !minimock.Equal(*mm_want_ptrs.offset, mm_got.offset) {
				mmGetCommentsByPostIDs.t.Errorf("CommentServiceMock.GetCommentsByPostIDs got unexpected parameter offset, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCommentsByPostIDs.GetCommentsByPostIDsMock.defaultExpectation.expectationOrigins.originOffset, *mm_want_ptrs.offset, mm_got.offset, minimock.Diff(*mm_want_ptrs.offset, mm_got.offset))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetCommentsByPostIDs.t.Errorf("CommentServiceMock.GetCommentsByPostIDs got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetCommentsByPostIDs.GetCommentsByPostIDsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetCommentsByPostIDs.GetCommentsByPostIDsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetCommentsByPostIDs.t.Fatal("No results are set for the CommentServiceMock.GetCommentsByPostIDs")
		}
		return (*mm_results).m1, (*mm_results).err
	}
	if mmGetCommentsByPostIDs.funcGetCommentsByPostIDs != nil {
		return mmGetCommentsByPostIDs.funcGetCommentsByPostIDs(ctx, postIDs, limit, offset)
	}
	mmGetCommentsByPostIDs.t.Fatalf("Unexpected call to CommentServiceMock.GetCommentsByPostIDs. %v %v %v %v", ctx, postIDs, limit, offset)
	return
}

// GetCommentsByPostIDsAfterCounter returns a count of finished CommentServiceMock.GetCommentsByPostIDs invocations
func (mmGetCommentsByPostIDs *CommentServiceMock) GetCommentsByPostIDsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCommentsByPostIDs.afterGetCommentsByPostIDsCounter)
}

// GetCommentsByPostIDsBeforeCounter returns a count of CommentServiceMock.GetCommentsByPostIDs invocations
func (mmGetCommentsByPostIDs *CommentServiceMock) GetCommentsByPostIDsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCommentsByPostIDs.beforeGetCommentsByPostIDsCounter)
}

// Calls returns a list of arguments used in each call to CommentServiceMock.GetCommentsByPostIDs.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetCommentsByPostIDs *mCommentServiceMockGetCommentsByPostIDs) Calls() []*CommentServiceMockGetCommentsByPostIDsParams {
	mmGetCommentsByPostIDs.mutex.RLock()

	argCopy := make([]*CommentServiceMockGetCommentsByPostIDsParams, len(mmGetCommentsByPostIDs.callArgs))
	copy(argCopy, mmGetCommentsByPostIDs.callArgs)

	mmGetCommentsByPostIDs.mutex.RUnlock()

	return argCopy
}

// MinimockGetCommentsByPostIDsDone returns true if the count of the GetCommentsByPostIDs invocations corresponds
// the number of defined expectations
func (m *CommentServiceMock) MinimockGetCommentsByPostIDsDone() bool {
	if m.GetCommentsByPostIDsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetCommentsByPostIDsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetCommentsByPostIDsMock.invocationsDone()
}

// MinimockGetCommentsByPostIDsInspect logs each unmet expectation
func (m *CommentServiceMock) MinimockGetCommentsByPostIDsInspect() {
	for _, e := range m.GetCommentsByPostIDsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommentServiceMock.GetCommentsByPostIDs at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCommentsByPostIDsCounter := mm_atomic.LoadUint64(&m.afterGetCommentsByPostIDsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetCommentsByPostIDsMock.defaultExpectation != nil && afterGetCommentsByPostIDsCounter < 1 {
		if m.GetCommentsByPostIDsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CommentServiceMock.GetCommentsByPostIDs at\n%s", m.GetCommentsByPostIDsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CommentServiceMock.GetCommentsByPostIDs at\n%s with params: %#v", m.GetCommentsByPostIDsMock.defaultExpectation.expectationOrigins.origin, *m.GetCommentsByPostIDsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCommentsByPostIDs != nil && afterGetCommentsByPostIDsCounter < 1 {
		m.t.Errorf("Expected call to CommentServiceMock.GetCommentsByPostIDs at\n%s", m.funcGetCommentsByPostIDsOrigin)
	}

	if !m.GetCommentsByPostIDsMock.invocationsDone() && afterGetCommentsByPostIDsCounter > 0 {
		m.t.Errorf("Expected %d calls to CommentServiceMock.GetCommentsByPostIDs at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetCommentsByPostIDsMock.expectedInvocations), m.GetCommentsByPostIDsMock.expectedInvocationsOrigin, afterGetCommentsByPostIDsCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CommentServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateCommentInspect()

			m.MinimockGetCommentsInspect()

			m.MinimockGetCommentsByParentIDInspect()

			m.MinimockGetCommentsByPostIDsInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CommentServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CommentServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateCommentDone() &&
		m.MinimockGetCommentsDone() &&
		m.MinimockGetCommentsByParentIDDone() &&
		m.MinimockGetCommentsByPostIDsDone()
}
