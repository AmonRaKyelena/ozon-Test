package handlers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"errors"
	"fmt"
	"github.com/AmonRaKyelena/ozon-Test/internal/graph"
	"github.com/AmonRaKyelena/ozon-Test/internal/handlers/model"
	"github.com/AmonRaKyelena/ozon-Test/internal/pkg/loader"
	"github.com/AmonRaKyelena/ozon-Test/internal/pkg/logger"

	"github.com/graph-gophers/dataloader"
	"go.uber.org/zap"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input *model.NewPost) (int64, error) {
	log := logger.LoggerFromContext(ctx)

	postID, err := r.postService.CreatePost(ctx, *input)
	if err != nil {
		log.Error("failed create post", zap.Error(err))
		return 0, err
	}
	return postID, nil
}

// Comments is the resolver for the comments field.
func (r *postForPaginationResolver) Comments(ctx context.Context, obj *model.PostForPagination, limit *int32, offset *int32) ([]*model.CommentForPagination, error) {
	log := logger.LoggerFromContext(ctx)

	loaderInstance, err := loader.LoaderFromContext(ctx)
	if err != nil {
		log.Error("failed get loader from context", zap.Error(err))
		return nil, err
	}

	ctx = loader.FillPaginatioValue(ctx, *limit, *offset)
	thunk := loaderInstance.Load(ctx, dataloader.StringKey(fmt.Sprint(obj.ID)))

	result, err := thunk()
	if err != nil {
		log.Error("failed wait thunk", zap.Error(err))
		return nil, err
	}
	comments, ok := result.([]*model.CommentForPagination)
	if !ok {
		return nil, errors.New("unexpected type in DataLoader result")
	}

	return comments, nil
}

// ListOfPosts is the resolver for the listOfPosts field.
func (r *queryResolver) ListOfPosts(ctx context.Context, limit *int32, offset *int32) ([]*model.PostForPagination, error) {
	log := logger.LoggerFromContext(ctx)

	posts, err := r.postService.GetAllPosts(ctx, *limit, *offset)
	if err != nil {
		log.Error("failed get all post", zap.Error(err))
		return nil, err
	}

	result := make([]*model.PostForPagination, 0, len(posts))
	for _, post := range posts {
		result = append(result, &post)
	}
	return result, nil
}

// OnePost is the resolver for the onePost field.
func (r *queryResolver) OnePost(ctx context.Context, id int64) (*model.PostForPagination, error) {
	log := logger.LoggerFromContext(ctx)

	post, err := r.postService.GetPostByID(ctx, id)
	if err != nil {
		log.Error("failed get post", zap.Int64("post_id", id), zap.Error(err))
		return nil, err
	}
	return post, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// PostForPagination returns graph.PostForPaginationResolver implementation.
func (r *Resolver) PostForPagination() graph.PostForPaginationResolver {
	return &postForPaginationResolver{r}
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type postForPaginationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
